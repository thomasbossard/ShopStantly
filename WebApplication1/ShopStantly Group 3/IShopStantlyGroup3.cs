// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace WebApplication2
{
    using System;
    using System.Collections.Generic;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Models;

    /// <summary>
    /// Definitionen (mit Maja so besprochen):
    /// -keine Authentication oder Authorization einbauen.
    /// -es ist egal, welche Technologie für die einzelnen Microservices
    /// verwendet werden.
    /// -es muss kein GUI erstellt werden
    /// -SSL ist nicht nötig, http reicht
    /// -es soll schlussendlich 1 gesamter Workflow abgebildet sein
    /// -wo Datenbanken benötigt werden, sollen solche eingesetzt werden. Wie
    /// die Daten gespeichert werden ist eigentlich egual.
    /// -beim ControlService muss zwingend eine Datenbank vorhanden sein
    /// -Dieses Swagger ist gleichzeitig auch die Dokumentation, darum immer
    /// aktuell halten
    /// 
    /// Zuweisung Services:
    /// Cyrill: PaymentService und InventoryService mit GUI
    /// Thomas &amp; Reto: ControlService
    /// Lukas &amp; Cyrill: PaymentService mit 3rdPartyService
    /// </summary>
    public partial interface IShopStantlyGroup3 : IDisposable
    {
        /// <summary>
        /// The base URI of the service.
        /// </summary>
        Uri BaseUri { get; set; }

        /// <summary>
        /// Gets or sets json serialization settings.
        /// </summary>
        JsonSerializerSettings SerializationSettings { get; }

        /// <summary>
        /// Gets or sets json deserialization settings.
        /// </summary>
        JsonSerializerSettings DeserializationSettings { get; }

        /// <summary>
        /// Subscription credentials which uniquely identify client
        /// subscription.
        /// </summary>
        ServiceClientCredentials Credentials { get; }


            /// <summary>
        /// Startet den Workflow mit einer neuen Bestellung
        /// </summary>
        /// <param name='body'>
        /// Input ist ein Order-JSON File
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> OrderWithHttpMessagesAsync(Order body = default(Order), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Löst den Bezahlvorgang auf einer Bestellung aus
        /// </summary>
        /// <param name='body'>
        /// Input ist ein Order-JSON File
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> InvoicepostWithHttpMessagesAsync(InvoiceRequest body = default(InvoiceRequest), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Fragt den Bezahlstatus einer Bestellung ab. Response sollte
        /// einfach nur abgeschlossen oder nicht abgeschlossen sein.  Die
        /// Statusveränderung passiert dann wieder beim ControlService
        /// </summary>
        /// <param name='orderID'>
        /// Input ist eine orderID Nummer
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<InvoiceState>> InvoicegetWithHttpMessagesAsync(long orderID, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Löst den Warenausgang aus.
        /// </summary>
        /// <param name='body'>
        /// Input ist ein Order-JSON File
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> InventorypostWithHttpMessagesAsync(InventoryRequest body = default(InventoryRequest), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Fragt den Inventory einer Bestellung ab. Response ist
        /// InventoryState:completed oder InventoryState:pending
        /// </summary>
        /// <param name='orderID'>
        /// Input ist eine orderID Nummer
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<InventoryState>> InventorygetWithHttpMessagesAsync(long orderID, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Löst das Versenden einer Bestellung aus.
        /// </summary>
        /// Mit diesem Service kann eine Bestellung versendet werden. Der
        /// Shipping Service lieftert dann Daten beim externen Versandpartner
        /// ein.
        /// <param name='shipmentRequest'>
        /// Input ist ein ShipmentRequest-JSON File
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> ShipmentpostWithHttpMessagesAsync(ShipmentRequest shipmentRequest = default(ShipmentRequest), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Fragt den Versand-Status einer Bestellung ab.
        /// </summary>
        /// Response ist ein JSON mit mit der OrderID, der TrackingNummer und
        /// dem Status.  Falls die Bestellung noch nicht versendet wurde
        /// trackingNumber=null
        /// <param name='orderID'>
        /// Input ist eine orderID Nummer
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ShipmentState>> ShipmentgetWithHttpMessagesAsync(int orderID, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
    }
}
